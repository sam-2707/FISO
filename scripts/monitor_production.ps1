# FISO Multi-Cloud Monitoring Stack
# PowerShell script to set up comprehensive monitoring

Write-Host "=================================================="
Write-Host "FISO Production Monitoring Setup"
Write-Host "=================================================="

# Create monitoring directory
if (!(Test-Path "monitoring")) {
    New-Item -ItemType Directory -Name "monitoring"
    Write-Host "‚úÖ Created monitoring directory"
}

# Function to test all endpoints
function Test-AllEndpoints {
    Write-Host ""
    Write-Host "üîç Testing All FISO Endpoints..." -ForegroundColor Cyan
    
    $endpoints = @{
        "AWS Lambda (Health)" = "https://krls9u88od.execute-api.us-east-1.amazonaws.com/prod/health"
        "AWS Lambda (Orchestrate)" = "https://krls9u88od.execute-api.us-east-1.amazonaws.com/prod/orchestrate"
        "Azure Functions" = "https://fiso-sample-function-app-cmcks5.azurewebsites.net/api/httptriggerfunc"
        "GCP Emulator" = "http://localhost:8080"
    }
    
    $results = @()
    
    foreach ($name in $endpoints.Keys) {
        $url = $endpoints[$name]
        Write-Host "  Testing $name..." -ForegroundColor Yellow
        
        try {
            $startTime = Get-Date
            
            if ($name -like "*Orchestrate*") {
                $body = @{
                    target = "monitoring-test"
                    data = @{
                        test_id = "monitoring-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
                        source = "monitoring-script"
                    }
                } | ConvertTo-Json
                
                $response = Invoke-RestMethod -Uri $url -Method POST -Body $body -ContentType "application/json" -TimeoutSec 10
            } else {
                $response = Invoke-RestMethod -Uri $url -Method GET -TimeoutSec 10
            }
            
            $endTime = Get-Date
            $duration = ($endTime - $startTime).TotalMilliseconds
            
            $results += [PSCustomObject]@{
                Endpoint = $name
                Status = "‚úÖ ONLINE"
                ResponseTime = "$($duration.ToString('F0'))ms"
                StatusCode = "200"
                Provider = ($name -split " ")[0]
            }
            
            Write-Host "    ‚úÖ Success ($($duration.ToString('F0'))ms)" -ForegroundColor Green
            
        } catch {
            $results += [PSCustomObject]@{
                Endpoint = $name
                Status = "‚ùå OFFLINE"
                ResponseTime = "N/A"
                StatusCode = "Error"
                Provider = ($name -split " ")[0]
                Error = $_.Exception.Message
            }
            
            Write-Host "    ‚ùå Failed: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    return $results
}

# Function to generate monitoring report
function Generate-MonitoringReport {
    param($TestResults)
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $report = @"
# FISO Multi-Cloud Monitoring Report
Generated: $timestamp

## System Status Overview
$(
    $onlineCount = ($TestResults | Where-Object { $_.Status -like "*ONLINE*" }).Count
    $totalCount = $TestResults.Count
    $successRate = [math]::Round(($onlineCount / $totalCount) * 100, 1)
    "üéØ Overall Success Rate: $onlineCount/$totalCount ($successRate%)"
)

## Provider Status
$(
    $TestResults | ForEach-Object {
        "- **$($_.Provider)**: $($_.Status) | Response: $($_.ResponseTime)"
    }
)

## Performance Metrics
$(
    $onlineResults = $TestResults | Where-Object { $_.Status -like "*ONLINE*" }
    if ($onlineResults.Count -gt 0) {
        $avgResponseTime = ($onlineResults | ForEach-Object { 
            [double]($_.ResponseTime -replace 'ms', '')
        } | Measure-Object -Average).Average
        "- Average Response Time: $([math]::Round($avgResponseTime, 0))ms"
    }
)

## Detailed Results
| Endpoint | Status | Response Time | Provider |
|----------|--------|---------------|----------|
$(
    $TestResults | ForEach-Object {
        "| $($_.Endpoint) | $($_.Status) | $($_.ResponseTime) | $($_.Provider) |"
    }
)

## Next Steps
1. Monitor response times for performance degradation
2. Set up alerting for failures
3. Implement auto-failover if needed
4. Review cost optimization opportunities

---
*Generated by FISO Monitoring System*
"@

    # Save report
    $reportPath = "monitoring/fiso-monitoring-report-$(Get-Date -Format 'yyyyMMdd-HHmmss').md"
    $report | Out-File -FilePath $reportPath -Encoding UTF8
    Write-Host "üìä Monitoring report saved to: $reportPath" -ForegroundColor Green
    
    return $reportPath
}

# Function to check Kubernetes status
function Check-KubernetesStatus {
    Write-Host ""
    Write-Host "‚ò∏Ô∏è Checking Kubernetes Status..." -ForegroundColor Cyan
    
    try {
        # Check nodes
        $nodes = kubectl get nodes --no-headers 2>$null
        if ($nodes) {
            Write-Host "‚úÖ Kubernetes nodes:" -ForegroundColor Green
            $nodes | ForEach-Object { Write-Host "    $($_)" -ForegroundColor White }
        } else {
            Write-Host "‚ö†Ô∏è No Kubernetes nodes found (nodegroup may still be creating)" -ForegroundColor Yellow
        }
        
        # Check pods
        Write-Host ""
        Write-Host "üì¶ Checking FISO pods..." -ForegroundColor Cyan
        $pods = kubectl get pods -l app=fiso-api --no-headers 2>$null
        if ($pods) {
            $pods | ForEach-Object {
                $status = ($_ -split '\s+')[2]
                if ($status -eq "Running") {
                    Write-Host "    ‚úÖ $($_)" -ForegroundColor Green
                } elseif ($status -eq "Pending") {
                    Write-Host "    ‚è≥ $($_)" -ForegroundColor Yellow
                } else {
                    Write-Host "    ‚ùå $($_)" -ForegroundColor Red
                }
            }
        } else {
            Write-Host "    ‚ö†Ô∏è No FISO pods found" -ForegroundColor Yellow
        }
        
        # Check services
        Write-Host ""
        Write-Host "üåê Checking services..." -ForegroundColor Cyan
        $services = kubectl get service fiso-api-service --no-headers 2>$null
        if ($services) {
            Write-Host "    ‚úÖ $services" -ForegroundColor Green
        } else {
            Write-Host "    ‚ö†Ô∏è FISO service not found" -ForegroundColor Yellow
        }
        
    } catch {
        Write-Host "‚ùå Kubernetes check failed: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Main monitoring execution
try {
    # Test all endpoints
    $results = Test-AllEndpoints
    
    # Check Kubernetes
    Check-KubernetesStatus
    
    # Generate report
    Write-Host ""
    Write-Host "üìä Generating Monitoring Report..." -ForegroundColor Cyan
    $reportPath = Generate-MonitoringReport -TestResults $results
    
    # Summary
    Write-Host ""
    Write-Host "=================================================="
    Write-Host "FISO Monitoring Summary" -ForegroundColor Cyan
    Write-Host "=================================================="
    
    $onlineCount = ($results | Where-Object { $_.Status -like "*ONLINE*" }).Count
    $totalCount = $results.Count
    $successRate = [math]::Round(($onlineCount / $totalCount) * 100, 1)
    
    Write-Host "üéØ System Status: $onlineCount/$totalCount endpoints online ($successRate%)" -ForegroundColor $(if ($successRate -eq 100) { "Green" } elseif ($successRate -ge 80) { "Yellow" } else { "Red" })
    
    if ($successRate -eq 100) {
        Write-Host "üöÄ All systems operational! FISO is ready for production." -ForegroundColor Green
    } elseif ($successRate -ge 80) {
        Write-Host "‚ö†Ô∏è Partial system availability. Some providers may be offline." -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå Multiple system failures detected. Check individual providers." -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üìÅ Detailed report: $reportPath" -ForegroundColor White
    Write-Host "üîÑ Run this script regularly for continuous monitoring" -ForegroundColor Cyan
    
} catch {
    Write-Host "‚ùå Monitoring script failed: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "=================================================="
