# Production Environment Configuration
# For FISO Enterprise Intelligence Platform production deployment

# Environment Settings
environment: production
debug: false
log_level: WARNING

# Application Configuration
app:
  name: "FISO Enterprise Intelligence Platform"
  version: "1.0.0"
  host: "0.0.0.0"
  port: 5000
  secret_key: "${SECRET_KEY}"
  
  # Production Security Headers
  security_headers:
    x_content_type_options: "nosniff"
    x_frame_options: "DENY"
    x_xss_protection: "1; mode=block"
    strict_transport_security: "max-age=31536000; includeSubDomains"

# Real-time Server Configuration
realtime:
  enabled: true
  host: "0.0.0.0"
  port: 5001
  websocket_path: "/ws"
  heartbeat_interval: 30
  connection_limit: 1000

# Database Configuration
database:
  type: sqlite
  path: "/data/fiso_production.db"
  backup_enabled: true
  backup_schedule: "0 1 * * *"  # Daily at 1 AM
  backup_retention: "30 days"
  
  # Connection Pool
  pool_size: 20
  max_overflow: 30
  pool_timeout: 30
  
# Kubernetes Configuration
kubernetes:
  namespace: "fiso-production"
  context: "production-cluster"
  manifests_path: "k8s/production"
  replicas: 3
  
  # Resource Limits (Production Scale)
  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"
      
  # Auto-scaling
  autoscaling:
    enabled: true
    min_replicas: 3
    max_replicas: 10
    target_cpu_utilization: 60
    target_memory_utilization: 70
    
  # Pod Disruption Budget
  pod_disruption_budget:
    enabled: true
    min_available: 2

# AI/ML Configuration
ai:
  model_path: "/app/models/"
  fallback_enabled: true
  confidence_threshold: 0.8
  max_prediction_days: 90
  
  # Production AI Settings
  batch_processing: true
  model_caching: true
  prediction_queue_size: 1000
  
  # OpenAI Configuration
  openai:
    api_key: "${OPENAI_API_KEY}"
    model: "gpt-4"
    enabled: true
    rate_limit: 1000  # requests per hour
    timeout: 30
  
  # AutoML Configuration
  automl:
    enabled: true
    budget: 300  # seconds
    parallel_jobs: 4

# Cloud Provider APIs (Production)
cloud_providers:
  aws:
    enabled: true
    mock_data: false
    access_key_id: "${AWS_ACCESS_KEY_ID}"
    secret_access_key: "${AWS_SECRET_ACCESS_KEY}"
    region: "us-east-1"
    
    # Production AWS Settings
    assume_role_arn: "${AWS_ASSUME_ROLE_ARN}"
    external_id: "${AWS_EXTERNAL_ID}"
    session_duration: 3600
    
  azure:
    enabled: true
    mock_data: false
    subscription_id: "${AZURE_SUBSCRIPTION_ID}"
    client_id: "${AZURE_CLIENT_ID}"
    client_secret: "${AZURE_CLIENT_SECRET}"
    tenant_id: "${AZURE_TENANT_ID}"
    
    # Production Azure Settings
    resource_graph_enabled: true
    cost_management_api: true
    
  gcp:
    enabled: true
    mock_data: false
    project_id: "${GCP_PROJECT_ID}"
    service_account_key_path: "/secrets/gcp-service-account.json"
    
    # Production GCP Settings
    billing_account: "${GCP_BILLING_ACCOUNT}"
    cloud_asset_inventory: true

# Security Configuration (Production Grade)
security:
  cors_enabled: true
  cors_origins: 
    - "https://fiso.enterprise.com"
    - "https://app.fiso.enterprise.com"
  
  # Rate Limiting
  rate_limiting:
    enabled: true
    requests_per_minute: 200
    burst_size: 20
    per_ip_limit: 100
    
  # DDoS Protection
  ddos_protection:
    enabled: true
    threshold: 1000  # requests per minute
    block_duration: 3600  # seconds
  
  # Authentication & Authorization
  authentication:
    enabled: true
    type: "oauth2"
    
    # OAuth2 Configuration
    oauth2:
      provider: "azure_ad"
      client_id: "${OAUTH2_CLIENT_ID}"
      client_secret: "${OAUTH2_CLIENT_SECRET}"
      tenant_id: "${OAUTH2_TENANT_ID}"
      scopes: ["openid", "profile", "email"]
      
    # JWT Configuration
    jwt:
      secret: "${JWT_SECRET}"
      algorithm: "RS256"
      token_expiry: 3600  # 1 hour
      refresh_token_expiry: 86400  # 24 hours
      
  # RBAC Configuration
  rbac:
    enabled: true
    roles:
      - name: "admin"
        permissions: ["*"]
      - name: "analyst"
        permissions: ["read:reports", "read:analytics", "create:reports"]
      - name: "viewer"
        permissions: ["read:reports", "read:analytics"]
        
  # HTTPS/TLS Configuration
  tls:
    enabled: true
    cert_path: "/certs/tls.crt"
    key_path: "/certs/tls.key"
    min_version: "1.2"
    cipher_suites: 
      - "ECDHE-RSA-AES256-GCM-SHA384"
      - "ECDHE-RSA-AES128-GCM-SHA256"
      
  # WAF Configuration
  waf:
    enabled: true
    provider: "cloudflare"
    rules:
      - "sql_injection_protection"
      - "xss_protection"
      - "rate_limiting"
      - "geo_blocking"

# Monitoring Configuration (Enterprise Grade)
monitoring:
  enabled: true
  namespace: "monitoring"
  
  # Prometheus Configuration
  prometheus:
    enabled: true
    url: "https://prometheus.fiso.enterprise.com"
    retention: "90d"
    scrape_interval: "15s"
    storage_size: "100Gi"
    
    # High Availability
    replicas: 2
    
  # Grafana Configuration
  grafana:
    enabled: true
    url: "https://grafana.fiso.enterprise.com"
    admin_password: "${GRAFANA_ADMIN_PASSWORD}"
    
    # SSO Integration
    oauth:
      enabled: true
      provider: "azure_ad"
      
  # Alerting (24/7 Production)
  alerting:
    enabled: true
    
    # Alert Channels
    channels:
      - name: "critical-alerts"
        type: "pagerduty"
        integration_key: "${PAGERDUTY_INTEGRATION_KEY}"
        severity: "critical"
        
      - name: "warning-alerts"
        type: "slack"
        webhook: "${SLACK_WEBHOOK_URL}"
        channel: "#fiso-alerts"
        severity: "warning"
        
      - name: "email-alerts"
        type: "email"
        recipients: ["ops@enterprise.com", "dev@enterprise.com"]
        
    # Alert Rules
    rules:
      - name: "high_cpu_usage"
        expression: "cpu_usage > 80"
        duration: "5m"
        severity: "warning"
        
      - name: "memory_exhaustion"
        expression: "memory_usage > 90"
        duration: "2m"
        severity: "critical"
        
      - name: "service_down"
        expression: "up == 0"
        duration: "1m"
        severity: "critical"
        
      - name: "high_error_rate"
        expression: "error_rate > 5"
        duration: "5m"
        severity: "warning"
        
  # Health Checks
  health_checks:
    enabled: true
    interval: 30
    timeout: 10
    retries: 3
    endpoints:
      - "https://api.fiso.enterprise.com/health"
      - "https://api.fiso.enterprise.com:5001/health"
      
  # Logging (Centralized Production Logging)
  logging:
    level: WARNING
    format: "json"
    centralized: true
    
    # ELK Stack
    elasticsearch:
      enabled: true
      cluster: "production-elk"
      url: "${ELASTICSEARCH_URL}"
      index: "fiso-production-logs"
      username: "${ELASTICSEARCH_USERNAME}"
      password: "${ELASTICSEARCH_PASSWORD}"
      
    # Log Retention
    retention: "90 days"
    
    # Log Sampling (to reduce volume)
    sampling:
      enabled: true
      rate: 0.1  # Sample 10% of logs

# Ingress Configuration (Production Load Balancer)
ingress:
  enabled: true
  class: "nginx"
  
  # Production Annotations
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/connection-proxy-header: "keep-alive"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
  # Production Hosts
  hosts:
    - host: "api.fiso.enterprise.com"
      paths:
        - path: "/"
          service: "fiso-enterprise"
          port: 5000
    - host: "ws.fiso.enterprise.com"
      paths:
        - path: "/"
          service: "fiso-enterprise"
          port: 5001
          
  # TLS Configuration
  tls:
    - secretName: "fiso-production-tls"
      hosts:
        - "api.fiso.enterprise.com"
        - "ws.fiso.enterprise.com"

# Storage Configuration (Production Persistent Storage)
storage:
  type: "persistent"
  class: "ssd"
  size: "100Gi"
  access_modes: ["ReadWriteOnce"]
  
  # Backup Configuration
  backup:
    enabled: true
    schedule: "0 1 * * *"  # Daily at 1 AM
    retention: "90 days"
    storage_class: "backup-ssd"
    encryption: true
    
    # Cross-region backup
    cross_region:
      enabled: true
      regions: ["us-west-2", "eu-west-1"]

# Performance Configuration (Production Scale)
performance:
  cache_enabled: true
  cache_ttl: 1800  # 30 minutes
  
  # Redis Cluster
  redis:
    enabled: true
    cluster_mode: true
    nodes: 3
    url: "${REDIS_URL}"
    password: "${REDIS_PASSWORD}"
    ssl: true
    
  # Connection Pooling
  connection_pool_size: 50
  max_connections: 200
  request_timeout: 60
  
  # CDN Configuration
  cdn:
    enabled: true
    provider: "cloudflare"
    zone_id: "${CLOUDFLARE_ZONE_ID}"
    api_token: "${CLOUDFLARE_API_TOKEN}"
    
    # Caching Rules
    cache_rules:
      - path: "/static/*"
        ttl: 86400  # 24 hours
      - path: "/api/pricing-data"
        ttl: 3600   # 1 hour

# Features Configuration (Production Features)
features:
  executive_reporting: true
  real_time_streaming: true
  ai_predictions: true
  natural_language: true
  anomaly_detection: true
  cost_optimization: true
  multi_cloud: true
  advanced_analytics: true
  enterprise_sso: true
  audit_logging: true
  data_encryption: true
  
# Compliance Configuration
compliance:
  gdpr:
    enabled: true
    data_retention: "2 years"
    right_to_be_forgotten: true
    
  sox:
    enabled: true
    audit_trail: true
    change_approval: true
    
  hipaa:
    enabled: false
    
# Disaster Recovery
disaster_recovery:
  enabled: true
  
  # Multi-region setup
  regions:
    primary: "us-east-1"
    secondary: "us-west-2"
    
  # RTO/RPO Targets
  rto: 60  # minutes
  rpo: 15  # minutes
  
  # Backup Strategy
  backup_strategy: "3-2-1"  # 3 copies, 2 different media, 1 offsite
  
# CI/CD Configuration (Production Pipeline)
cicd:
  enabled: true
  branch: "main"
  auto_deploy: false  # Manual approval required for production
  rollback_enabled: true
  
  # Blue-Green Deployment
  deployment:
    strategy: "blue_green"
    health_check_grace_period: 300  # 5 minutes
    
  # Quality Gates (Strict for Production)
  quality_gates:
    unit_tests: true
    integration_tests: true
    security_scan: true
    performance_tests: true
    load_tests: true
    
    # Thresholds
    code_coverage_threshold: 80  # %
    performance_threshold: 1000  # ms
    success_rate_threshold: 99   # %
    security_score_threshold: 8  # /10
    
  # Approval Process
  approvals:
    required: true
    approvers:
      - "ops-team"
      - "security-team"
      - "architecture-team"
