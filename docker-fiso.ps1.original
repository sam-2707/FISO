#!/usr/bin/env pwsh
<#
.SYNOPSIS
    FISO Docker Management Script
.DESCRIPTION
    Build, run, and manage FISO Docker containers
.PARAMETER Action
    Action to perform: build, run, stop, logs, clean
.PARAMETER Mode
    Mode: dev or prod (affects which compose file to use)
.PARAMETER Port
    Port to expose for the main service (default: 5000)
.PARAMETER Profile
    Docker compose profile to use (monitoring, with-proxy)
.EXAMPLE
    .\docker-fiso.ps1 -Action build
    .\docker-fiso.ps1 -Action run -Mode prod
    .\docker-fiso.ps1 -Action logs
#>

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet('build', 'run', 'stop', 'logs', 'clean', 'status')]
    [string]$Action,
    
    [Parameter()]
    [ValidateSet('dev', 'prod')]
    [string]$Mode = 'prod',
    
    [Parameter()]
    [int]$Port = 5000,
    
    [Parameter()]
    [string]$Profile = ""
)

# Color functions
function Write-Info($message) {
    Write-Host "ℹ️  $message" -ForegroundColor Cyan
}

function Write-Success($message) {
    Write-Host "✅ $message" -ForegroundColor Green
}

function Write-Error($message) {
    Write-Host "❌ $message" -ForegroundColor Red
}

function Write-Warning($message) {
    Write-Host "⚠️  $message" -ForegroundColor Yellow
}

# Check if Docker is installed and running
function Test-Docker {
    try {
        $dockerVersion = docker --version 2>$null
        if ($dockerVersion) {
            Write-Success "Docker found: $dockerVersion"
            
            # Check if Docker daemon is running
            docker info >$null 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Success "Docker daemon is running"
                return $true
            } else {
                Write-Error "Docker daemon is not running. Please start Docker Desktop."
                return $false
            }
        }
    } catch {
        Write-Error "Docker not found. Please install Docker Desktop."
        return $false
    }
    return $false
}

# Check if docker-compose is available
function Test-DockerCompose {
    try {
        docker-compose --version >$null 2>&1
        if ($LASTEXITCODE -eq 0) {
            return "docker-compose"
        }
        
        docker compose version >$null 2>&1
        if ($LASTEXITCODE -eq 0) {
            return "docker compose"
        }
        
        Write-Error "Docker Compose not found"
        return $null
    } catch {
        Write-Error "Docker Compose not found"
        return $null
    }
}

function Build-FisoContainer {
    Write-Info "Building FISO production container..."
    
    # Build the container
    docker build -f Dockerfile.production -t fiso:latest .
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Container built successfully!"
        
        # Show image info
        $imageInfo = docker images fiso:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
        Write-Info "Image information:"
        Write-Host $imageInfo
    } else {
        Write-Error "Container build failed!"
        exit 1
    }
}

function Run-FisoContainer {
    param([string]$ComposeCmd)
    
    Write-Info "Starting FISO platform..."
    
    $composeFile = if ($Mode -eq "prod") { "docker-compose.production.yml" } else { "docker-compose.yml" }
    
    if (-not (Test-Path $composeFile)) {
        Write-Warning "Compose file $composeFile not found, using direct docker run..."
        
        # Stop existing container if running
        docker stop fiso-container 2>$null
        docker rm fiso-container 2>$null
        
        # Run container directly
        docker run -d `
            --name fiso-container `
            -p "${Port}:5000" `
            -p "5001:5001" `
            -v "${PWD}/logs:/app/logs" `
            -v "${PWD}/reports:/app/reports" `
            -v "${PWD}/data:/app/data" `
            fiso:latest
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "FISO container started successfully!"
            Write-Info "🚀 Access FISO at: http://localhost:$Port"
            Write-Info "🔄 Real-time API at: http://localhost:5001"
        } else {
            Write-Error "Failed to start container"
            exit 1
        }
    } else {
        # Use docker-compose
        $profileArg = if ($Profile) { "--profile $Profile" } else { "" }
        
        $cmd = "$ComposeCmd -f $composeFile $profileArg up -d"
        Write-Info "Running: $cmd"
        
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "FISO services started successfully!"
            Write-Info "🚀 Access FISO at: http://localhost:$Port"
            if ($Profile -eq "monitoring") {
                Write-Info "📊 Grafana at: http://localhost:3000"
                Write-Info "📈 Prometheus at: http://localhost:9090"
            }
        } else {
            Write-Error "Failed to start services"
            exit 1
        }
    }
}

function Stop-FisoContainer {
    param([string]$ComposeCmd)
    
    Write-Info "Stopping FISO services..."
    
    $composeFile = if ($Mode -eq "prod") { "docker-compose.production.yml" } else { "docker-compose.yml" }
    
    if (Test-Path $composeFile) {
        $profileArg = if ($Profile) { "--profile $Profile" } else { "" }
        Invoke-Expression "$ComposeCmd -f $composeFile $profileArg down"
    }
    
    # Also stop direct container if running
    docker stop fiso-container 2>$null
    docker rm fiso-container 2>$null
    
    Write-Success "FISO services stopped"
}

function Show-FisoLogs {
    param([string]$ComposeCmd)
    
    $composeFile = if ($Mode -eq "prod") { "docker-compose.production.yml" } else { "docker-compose.yml" }
    
    if (Test-Path $composeFile) {
        Write-Info "Showing logs from docker-compose..."
        Invoke-Expression "$ComposeCmd -f $composeFile logs -f"
    } else {
        Write-Info "Showing logs from direct container..."
        docker logs -f fiso-container 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-Warning "No container logs found. Check if container is running."
        }
    }
}

function Show-FisoStatus {
    Write-Info "FISO Container Status:"
    Write-Host ""
    
    # Check docker-compose services
    $composeFile = if ($Mode -eq "prod") { "docker-compose.production.yml" } else { "docker-compose.yml" }
    
    if (Test-Path $composeFile) {
        docker-compose -f $composeFile ps 2>$null
    }
    
    # Check direct container
    $containerStatus = docker ps -a --filter name=fiso-container --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>$null
    if ($containerStatus) {
        Write-Host $containerStatus
    }
    
    # Check images
    Write-Host ""
    Write-Info "FISO Images:"
    docker images fiso --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
}

function Clean-FisoContainers {
    Write-Info "Cleaning up FISO containers and images..."
    
    # Stop and remove containers
    docker stop fiso-container 2>$null
    docker rm fiso-container 2>$null
    
    # Remove compose services
    $composeFile = if ($Mode -eq "prod") { "docker-compose.production.yml" } else { "docker-compose.yml" }
    if (Test-Path $composeFile) {
        docker-compose -f $composeFile down --rmi all --volumes 2>$null
    }
    
    # Remove FISO images
    docker rmi fiso:latest 2>$null
    docker rmi $(docker images -q --filter reference=fiso) 2>$null
    
    # Clean up dangling images
    docker image prune -f
    
    Write-Success "Cleanup completed"
}

# Main execution
Write-Info "FISO Docker Management Script"
Write-Info "============================="

if (-not (Test-Docker)) {
    exit 1
}

$composeCmd = Test-DockerCompose
if (-not $composeCmd) {
    Write-Warning "Docker Compose not available, using direct docker commands"
}

switch ($Action) {
    "build" {
        Build-FisoContainer
    }
    "run" {
        if ($composeCmd) {
            Run-FisoContainer $composeCmd
        } else {
            Run-FisoContainer ""
        }
    }
    "stop" {
        if ($composeCmd) {
            Stop-FisoContainer $composeCmd
        } else {
            Stop-FisoContainer ""
        }
    }
    "logs" {
        if ($composeCmd) {
            Show-FisoLogs $composeCmd
        } else {
            Show-FisoLogs ""
        }
    }
    "status" {
        Show-FisoStatus
    }
    "clean" {
        Clean-FisoContainers
    }
}

Write-Info "Operation completed."